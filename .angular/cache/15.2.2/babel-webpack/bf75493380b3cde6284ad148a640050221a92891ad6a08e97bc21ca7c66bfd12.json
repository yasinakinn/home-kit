{"ast":null,"code":"var _a;\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { NavParams, ModalController, AlertController } from '@ionic/angular';\nimport { AddDevicePage } from '../add-device/add-device.page';\nimport { Storage } from '@ionic/storage';\nimport { ControllerService } from '../services/controller.service';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { HttpClient } from '@angular/common/http';\nlet RoomPage = class RoomPage {\n  constructor(geolocation, httpClient, navParams, storage, modalCtrl, controller, alertController) {\n    this.geolocation = geolocation;\n    this.httpClient = httpClient;\n    this.navParams = navParams;\n    this.storage = storage;\n    this.modalCtrl = modalCtrl;\n    this.controller = controller;\n    this.alertController = alertController;\n    this.room = navParams.get('roomData');\n    this.humidityOutside = \"~\";\n    this.temperatureOutside = \"~\";\n    this.weatherImg = \"/assets/sun.svg\";\n    this.devices = this.room.devices;\n    if (this.devices.length == 0) {\n      this.isDevicesEmpty = false;\n    } else {\n      this.isDevicesEmpty = true;\n    }\n  }\n  ngOnInit() {\n    this.getWeather();\n    this.getDevices();\n  }\n  getWeather() {\n    this.geolocation.getCurrentPosition().then(data => {\n      let url = \"http://api.weatherstack.com/current?access_key=3ff6d77fb5981d97702375812e7ab5b9&query=\" + data.coords.latitude + \",\" + data.coords.longitude;\n      this.httpClient.get(url).subscribe(resa => {\n        console.log(resa);\n        this.temperatureOutside = resa[\"current\"].temperature;\n        this.humidityOutside = resa[\"current\"].humidity;\n        this.descriptions = resa[\"current\"].weather_descriptions[0];\n        let iconClass;\n        switch (this.descriptions) {\n          case 'Partly Cloudy':\n            iconClass = 'partly_cloudy';\n            break;\n          case 'Haze':\n          case 'Overcast':\n            iconClass = 'full_clouds';\n            break;\n          case 'Clear':\n            iconClass = 'night';\n            break;\n          case 'Patchy Light Drizzle':\n            iconClass = 'sun_rain_clouds';\n            break;\n          case 'Sunny':\n            iconClass = 'full_sun';\n            break;\n          case 'Patchy Rain Possible':\n            iconClass = 'cloud_slight_rain';\n            break;\n          case 'Light Rain':\n          case 'Light Rain, Mist':\n            iconClass = 'cloud_slight_rain';\n            break;\n          case 'Moderate Or Heavy Rain Shower':\n            iconClass = 'rainy';\n            break;\n          case 'Thunder':\n            iconClass = 'thunder';\n            break;\n          default:\n            iconClass = 'full_clouds';\n            break;\n          // some may be missing \n        }\n\n        ;\n        this.weatherImg = \"https://weatherstack.com/site_images/weather_icon_\" + iconClass + \".svg\";\n      });\n    });\n  }\n  getDevices() {\n    this.storage.get(\"rooms\").then(val => {\n      this.room = val.find(element => element.id === this.room.id);\n      this.devices = this.room.devices;\n      this.devices.forEach(element => {\n        switch (element.deviceType) {\n          case \"text\":\n            this.controller.client.subscribe(element.deviceTopic, 1);\n            this.controller.client.onMessageArrived = this.textMessageArrived.bind(this);\n            break;\n          case \"switch\":\n            this.controller.client.subscribe(element.deviceTopic, 1);\n            break;\n          case \"sensor\":\n            this.controller.client.subscribe(element.deviceTopic, 1);\n            this.controller.client.onMessageArrived = this.textMessageArrived.bind(this);\n            this.text = element.precision;\n            break;\n          default:\n            break;\n        }\n      });\n      if (this.devices.length == 0) {\n        this.isDevicesEmpty = false;\n      } else {\n        this.isDevicesEmpty = true;\n      }\n    });\n  }\n  textMessageArrived(message) {\n    if (document.getElementById(message.destinationName + \"0\")) {\n      document.getElementById(message.destinationName + \"0\").innerHTML = message.payloadString;\n    }\n    if (document.getElementById(message.destinationName + \"1\")) {\n      let element = this.devices.find(element => element.deviceTopic === message.destinationName && element.deviceType == \"sensor\");\n      let prefix = '';\n      let postfix = '';\n      let precision = 2;\n      if (element.prefix) prefix = element.prefix;\n      if (element.postfix) postfix = element.postfix;\n      if (element.precision) precision = element.precision;\n      document.getElementById(message.destinationName + \"1\").innerHTML = prefix + parseFloat(message.payloadString).toFixed(precision) + postfix;\n    }\n  }\n  dismiss() {\n    this.modalCtrl.dismiss({\n      'dismissed': true\n    });\n  }\n  addDevices() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const modal = yield this.modalCtrl.create({\n        component: AddDevicePage,\n        componentProps: {\n          'roomData': this.room\n        },\n        mode: \"ios\"\n      });\n      modal.onDidDismiss().then(() => {\n        this.getDevices();\n      });\n      return yield modal.present();\n    });\n  }\n  toggleChange(bool, device) {\n    switch (bool) {\n      case true:\n        this.controller.sendMessage(device.onEvent, device.deviceTopic);\n        break;\n      case false:\n        this.controller.sendMessage(device.offEvent, device.deviceTopic);\n        break;\n      default:\n        break;\n    }\n  }\n  presentAlertPrompt(device) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let inputs = [];\n      let buttons = [];\n      switch (device.deviceType) {\n        case \"text\":\n          inputs = [{\n            name: 'deviceName',\n            type: 'text',\n            value: device.deviceName,\n            placeholder: 'Insert new name'\n          }, {\n            name: 'deviceTopic',\n            type: 'text',\n            value: device.deviceTopic,\n            placeholder: 'Insert new topic'\n          }];\n          buttons = [{\n            text: 'Cancel',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: () => {\n              console.log('Confirm Cancel');\n            }\n          }, {\n            text: 'Delete',\n            cssClass: 'danger',\n            role: \"delete\",\n            handler: () => {\n              this.room.devices.forEach((element, i) => {\n                if (element.deviceId == device.deviceId) {\n                  this.room.devices.splice(i, 1);\n                }\n              });\n              this.storage.get(\"rooms\").then(val => {\n                val.forEach((element, i) => {\n                  if (element.id == this.room.id) {\n                    val[i] = this.room;\n                  }\n                });\n                this.storage.set(\"rooms\", val);\n              });\n            }\n          }, {\n            text: 'Ok',\n            role: \"ok\",\n            handler: data => {\n              device.deviceName = data.deviceName;\n              device.deviceTopic = data.deviceTopic;\n              this.room.devices.forEach((element, i) => {\n                if (element.deviceId == device.deviceId) {\n                  element = device;\n                }\n              });\n              this.storage.get(\"rooms\").then(val => {\n                val.forEach((element, i) => {\n                  if (element.id == this.room.id) {\n                    val[i] = this.room;\n                  }\n                });\n                this.storage.set(\"rooms\", val);\n              });\n            }\n          }];\n          break;\n        case \"switch\":\n          inputs = [{\n            name: 'deviceName',\n            type: 'text',\n            value: device.deviceName,\n            placeholder: 'Insert new name'\n          }, {\n            name: 'deviceTopic',\n            type: 'text',\n            value: device.deviceTopic,\n            placeholder: 'Insert new topic'\n          }, {\n            name: 'onEvent',\n            type: 'text',\n            value: device.onEvent,\n            placeholder: 'Insert new on event'\n          }, {\n            name: 'offEvent',\n            type: 'text',\n            value: device.offEvent,\n            placeholder: 'Insert new off event'\n          }];\n          buttons = [{\n            text: 'Cancel',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: () => {\n              console.log('Confirm Cancel');\n            }\n          }, {\n            text: 'Delete',\n            cssClass: 'danger',\n            role: \"delete\",\n            handler: () => {\n              this.room.devices.forEach((element, i) => {\n                if (element.deviceId == device.deviceId) {\n                  this.room.devices.splice(i, 1);\n                }\n              });\n              this.storage.get(\"rooms\").then(val => {\n                val.forEach((element, i) => {\n                  if (element.id == this.room.id) {\n                    val[i] = this.room;\n                  }\n                });\n                this.storage.set(\"rooms\", val);\n              });\n            }\n          }, {\n            text: 'Ok',\n            role: 'ok',\n            handler: data => {\n              device.deviceName = data.deviceName;\n              device.deviceTopic = data.deviceTopic;\n              device.onEvent = data.onEvent;\n              device.offEvent = data.offEvent;\n              this.room.devices.forEach((element, i) => {\n                if (element.deviceId == device.deviceId) {\n                  element = device;\n                }\n              });\n              this.storage.get(\"rooms\").then(val => {\n                val.forEach((element, i) => {\n                  if (element.id == this.room.id) {\n                    val[i] = this.room;\n                  }\n                });\n                this.storage.set(\"rooms\", val);\n              });\n            }\n          }];\n          break;\n        case \"sensor\":\n          inputs = [{\n            name: 'deviceName',\n            type: 'text',\n            value: device.deviceName,\n            placeholder: 'Insert new name'\n          }, {\n            name: 'deviceTopic',\n            type: 'text',\n            value: device.deviceTopic,\n            placeholder: 'Insert new topic'\n          }, {\n            name: 'prefix',\n            type: 'text',\n            value: device.prefix,\n            placeholder: 'Insert new prefix'\n          }, {\n            name: 'postfix',\n            type: 'text',\n            value: device.postfix,\n            placeholder: 'Insert new postfix'\n          }, {\n            name: 'precision',\n            type: 'text',\n            value: device.precision,\n            placeholder: 'Insert new precision'\n          }];\n          buttons = [{\n            text: 'Cancel',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: () => {\n              console.log('Confirm Cancel');\n            }\n          }, {\n            text: 'Delete',\n            cssClass: 'danger',\n            role: \"delete\",\n            handler: () => {\n              this.room.devices.forEach((element, i) => {\n                if (element.deviceId == device.deviceId) {\n                  this.room.devices.splice(i, 1);\n                }\n              });\n              this.storage.get(\"rooms\").then(val => {\n                val.forEach((element, i) => {\n                  if (element.id == this.room.id) {\n                    val[i] = this.room;\n                  }\n                });\n                this.storage.set(\"rooms\", val);\n              });\n            }\n          }, {\n            text: 'Ok',\n            role: \"ok\",\n            handler: data => {\n              device.deviceName = data.deviceName;\n              device.deviceTopic = data.deviceTopic;\n              device.prefix = data.prefix;\n              device.postfix = data.postfix;\n              device.precision = data.precision;\n              this.room.devices.forEach((element, i) => {\n                if (element.deviceId == device.deviceId) {\n                  element = device;\n                }\n              });\n              this.storage.get(\"rooms\").then(val => {\n                val.forEach((element, i) => {\n                  if (element.id == this.room.id) {\n                    val[i] = this.room;\n                  }\n                });\n                this.storage.set(\"rooms\", val);\n              });\n              this.storage.get(\"widgets\").then(val => {\n                val.forEach((element, i) => {\n                  if (element.value == device.deviceTopic) {\n                    element.name = data.deviceName;\n                    element.value = data.deviceTopic;\n                    element.prefix = data.prefix;\n                    element.postfix = data.postfix;\n                    element.precision = data.precision;\n                    val[i] = element;\n                  }\n                });\n                this.storage.set(\"widgets\", val);\n              });\n            }\n          }];\n          break;\n        default:\n          break;\n      }\n      const alert = yield this.alertController.create({\n        header: 'Edit Device',\n        inputs: inputs,\n        buttons: buttons,\n        mode: \"ios\"\n      });\n      alert.onDidDismiss().then(e => {\n        if (e.role == \"ok\" || e.role == \"delete\") {\n          this.getDevices();\n        }\n      });\n      yield alert.present();\n    });\n  }\n  delete() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const alert = yield this.alertController.create({\n        header: 'Confirm!',\n        message: 'Are you sure you want to delete the room ?',\n        mode: \"ios\",\n        buttons: [{\n          text: 'Cancel',\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: blah => {\n            console.log('Confirm Cancel: blah');\n          }\n        }, {\n          text: 'Okay',\n          handler: () => {\n            this.storage.get(\"rooms\").then(val => {\n              val.forEach((element, i) => {\n                if (element.id == this.room.id) {\n                  val.splice(i, 1);\n                }\n              });\n              this.storage.set(\"rooms\", val);\n            });\n            this.dismiss();\n          }\n        }]\n      });\n      yield alert.present();\n    });\n  }\n};\nRoomPage = __decorate([Component({\n  selector: 'app-room',\n  templateUrl: './room.page.html',\n  styleUrls: ['./room.page.scss']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof Geolocation !== \"undefined\" && Geolocation) === \"function\" ? _a : Object, HttpClient, NavParams, Storage, ModalController, ControllerService, AlertController])], RoomPage);\nexport { RoomPage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}