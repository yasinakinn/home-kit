{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.cordovaSQLiteDriver = factory();\n})(this, function () {\n  'use strict';\n\n  function getSerializerPromise(localForageInstance) {\n    if (getSerializerPromise.result) {\n      return getSerializerPromise.result;\n    }\n    if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {\n      return Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));\n    }\n    getSerializerPromise.result = localForageInstance.getSerializer();\n    return getSerializerPromise.result;\n  }\n  function getDriverPromise(localForageInstance, driverName) {\n    getDriverPromise.result = getDriverPromise.result || {};\n    if (getDriverPromise.result[driverName]) {\n      return getDriverPromise.result[driverName];\n    }\n    if (!localForageInstance || typeof localForageInstance.getDriver !== 'function') {\n      return Promise.reject(new Error('localforage.getDriver() was not available! ' + 'localforage v1.4+ is required!'));\n    }\n    getDriverPromise.result[driverName] = localForageInstance.getDriver(driverName);\n    return getDriverPromise.result[driverName];\n  }\n  function getWebSqlDriverPromise(localForageInstance) {\n    return getDriverPromise(localForageInstance, localForageInstance.WEBSQL);\n  }\n\n  /* global document, sqlitePlugin */\n  // we can't import this, since it gets defined later\n  // import sqlitePlugin from 'sqlitePlugin';\n\n  var deviceReady = new Promise(function (resolve, reject) {\n    if (typeof sqlitePlugin !== 'undefined') {\n      resolve();\n    } else if (typeof cordova === 'undefined') {\n      reject(new Error('cordova is not defined.'));\n    } else {\n      // Wait for Cordova to load\n      document.addEventListener(\"deviceready\", function () {\n        return resolve();\n      }, false);\n    }\n  });\n  var deviceReadyDone = deviceReady.catch(function () {\n    return Promise.resolve();\n  });\n  function getOpenDatabasePromise() {\n    return deviceReadyDone.then(function () {\n      if (typeof sqlitePlugin !== 'undefined' && typeof sqlitePlugin.openDatabase === 'function') {\n        return sqlitePlugin.openDatabase;\n      } else {\n        throw new Error('SQLite plugin is not present.');\n      }\n    });\n  }\n\n  /*\n   * Includes code from:\n   *\n   * localForage - websql driver\n   * https://github.com/mozilla/localforage\n   *\n   * Copyright (c) 2015 Mozilla\n   * Licensed under Apache 2.0 license.\n   *\n   */\n  // import localforage from 'localforage';\n  // // If cordova is not present, we can stop now.\n  // if (!globalObject.cordova) {\n  //     return;\n  // }\n\n  // Open the cordova sqlite plugin database (automatically creates one if one didn't\n  // previously exist), using any options set in the config.\n  function _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n      db: null\n    };\n    if (options) {\n      for (var i in options) {\n        dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n      }\n    }\n    var dbInfoPromise = getOpenDatabasePromise().then(function (openDatabase) {\n      return new Promise(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n          dbInfo.location = dbInfo.location || 'default';\n          dbInfo.db = openDatabase({\n            name: dbInfo.name,\n            version: String(dbInfo.version),\n            description: dbInfo.description,\n            size: dbInfo.size,\n            key: dbInfo.dbKey,\n            location: dbInfo.location\n          });\n        } catch (e) {\n          reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n          t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n            self._dbInfo = dbInfo;\n            resolve();\n          }, function (t, error) {\n            reject(error);\n          });\n        });\n      });\n    });\n    var serializerPromise = getSerializerPromise(self);\n    var webSqlDriverPromise = getWebSqlDriverPromise(self);\n    return Promise.all([serializerPromise, webSqlDriverPromise, dbInfoPromise]).then(function (results) {\n      dbInfo.serializer = results[0];\n      return dbInfoPromise;\n    });\n  }\n  var cordovaSQLiteDriver = {\n    _driver: 'cordovaSQLiteDriver',\n    _initStorage: _initStorage,\n    _support: function _support() {\n      return getOpenDatabasePromise().then(function (openDatabase) {\n        return !!openDatabase;\n      }).catch(function () {\n        return false;\n      });\n    }\n  };\n  function wireUpDriverMethods(driver) {\n    var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];\n    function wireUpDriverMethod(driver, methodName) {\n      driver[methodName] = function () {\n        var localForageInstance = this;\n        var args = arguments;\n        return getWebSqlDriverPromise(localForageInstance).then(function (webSqlDriver) {\n          return webSqlDriver[methodName].apply(localForageInstance, args);\n        });\n      };\n    }\n    for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n      wireUpDriverMethod(driver, LibraryMethods[i]);\n    }\n  }\n  wireUpDriverMethods(cordovaSQLiteDriver);\n  return cordovaSQLiteDriver;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}