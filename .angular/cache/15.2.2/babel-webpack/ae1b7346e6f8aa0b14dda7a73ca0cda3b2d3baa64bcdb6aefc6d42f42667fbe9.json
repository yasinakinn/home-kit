{"ast":null,"code":"var _a, _b;\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Client, Message } from 'ng2-mqtt/mqttws31';\nlet ControllerService = class ControllerService {\n  constructor(client, message) {\n    this.client = client;\n    this.message = message;\n    this.reconnectTimeout = 2000;\n    this.host = \"test.mosquitto.org\";\n    this.port = 9001;\n    this.mqttCounter = 0;\n    this.client = new Client(this.host, this.port, \"randomName\" + Math.floor(Math.random() * 9000) + 1000);\n    this.client.onMessageArrived = this.onMessageArrived.bind(this);\n    this.client.onConnectionLost = this.onConnectionLost.bind(this);\n  }\n  onConnectionLost(responseObject) {\n    console.log(\"Connection lost, trying reconnect\");\n    if (this.client.isConnected() == false) {\n      this.mqttCounter++;\n      this.client.connect({\n        onSuccess: this.onConnected.bind(this),\n        onFailure: this.onFail.bind(this)\n      });\n    }\n  }\n  onConnected() {\n    if (this.mqttCounter > 0) {\n      console.log(\"Connected after lost\");\n    } else {\n      console.log(\"Connected first time\");\n    }\n    return 0;\n  }\n  onFail() {\n    if (this.client.isConnected() == false) {\n      this.mqttCounter++;\n      this.client.connect({\n        onSuccess: this.onConnected.bind(this),\n        onFailure: this.onFail.bind(this)\n      });\n    }\n  }\n  onMessageArrived(message) {\n    return message;\n  }\n  sendMessage(msg, topic) {\n    return __awaiter(this, void 0, void 0, function* () {\n      var message = new Message(msg);\n      message.destinationName = topic;\n      this.client.send(message);\n    });\n  }\n};\nControllerService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [typeof (_a = typeof Client !== \"undefined\" && Client) === \"function\" ? _a : Object, typeof (_b = typeof Message !== \"undefined\" && Message) === \"function\" ? _b : Object])], ControllerService);\nexport { ControllerService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}