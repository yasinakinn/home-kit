{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { NavParams, ModalController, AlertController } from '@ionic/angular';\nimport { AddDevicePage } from '../add-device/add-device.page';\nimport { Storage } from '@ionic/storage';\nimport { ControllerService } from '../services/controller.service';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@ionic/storage\";\nimport * as i4 from \"../services/controller.service\";\nimport * as i5 from \"@angular/common\";\nfunction RoomPage_ion_row_41_ion_col_1_ion_toggle_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-toggle\", 31);\n    i0.ɵɵlistener(\"ionChange\", function RoomPage_ion_row_41_ion_col_1_ion_toggle_10_Template_ion_toggle_ionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const device_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.toggleChange($event.detail.checked, device_r3));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const device_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵpropertyInterpolate(\"checked\", device_r3.deviceId);\n  }\n}\nfunction RoomPage_ion_row_41_ion_col_1_ion_card_subtitle_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card-subtitle\", 32);\n    i0.ɵɵtext(1, \"Accessing\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const device_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵpropertyInterpolate1(\"id\", \"\", device_r3.deviceTopic, \"0\");\n  }\n}\nfunction RoomPage_ion_row_41_ion_col_1_ion_card_subtitle_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card-subtitle\", 32);\n    i0.ɵɵtext(1, \"Accessing\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const device_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵpropertyInterpolate1(\"id\", \"\", device_r3.deviceTopic, \"1\");\n  }\n}\nfunction RoomPage_ion_row_41_ion_col_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-col\", 25)(1, \"ion-card\", 26)(2, \"ion-card-content\")(3, \"ion-card-header\", 18);\n    i0.ɵɵelement(4, \"ion-icon\", 27);\n    i0.ɵɵelementStart(5, \"ion-card-title\", 18);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 19)(8, \"ion-icon\", 28);\n    i0.ɵɵlistener(\"click\", function RoomPage_ion_row_41_ion_col_1_Template_ion_icon_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const device_r3 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.presentAlertPrompt(device_r3));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"ion-ripple-effect\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, RoomPage_ion_row_41_ion_col_1_ion_toggle_10_Template, 1, 1, \"ion-toggle\", 29);\n    i0.ɵɵtemplate(11, RoomPage_ion_row_41_ion_col_1_ion_card_subtitle_11_Template, 2, 1, \"ion-card-subtitle\", 30);\n    i0.ɵɵtemplate(12, RoomPage_ion_row_41_ion_col_1_ion_card_subtitle_12_Template, 2, 1, \"ion-card-subtitle\", 30);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const device_r3 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"name\", device_r3.deviceImage);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(device_r3.deviceName);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", device_r3.deviceType == \"switch\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", device_r3.deviceType == \"text\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", device_r3.deviceType == \"sensor\");\n  }\n}\nfunction RoomPage_ion_row_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-row\", 23);\n    i0.ɵɵtemplate(1, RoomPage_ion_row_41_ion_col_1_Template, 13, 5, \"ion-col\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.devices);\n  }\n}\nfunction RoomPage_ion_card_content_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card-content\")(1, \"p\", 33);\n    i0.ɵɵtext(2, \"No device added yet\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport let RoomPage = /*#__PURE__*/(() => {\n  class RoomPage {\n    constructor(geolocation, httpClient, navParams, storage, modalCtrl, controller, alertController) {\n      this.geolocation = geolocation;\n      this.httpClient = httpClient;\n      this.navParams = navParams;\n      this.storage = storage;\n      this.modalCtrl = modalCtrl;\n      this.controller = controller;\n      this.alertController = alertController;\n      this.room = navParams.get('roomData');\n      this.humidityOutside = \"~\";\n      this.temperatureOutside = \"~\";\n      this.weatherImg = \"/assets/sun.svg\";\n      this.devices = this.room.devices;\n      if (this.devices.length == 0) {\n        this.isDevicesEmpty = false;\n      } else {\n        this.isDevicesEmpty = true;\n      }\n    }\n    ngOnInit() {\n      this.getWeather();\n      this.getDevices();\n    }\n    getWeather() {\n      this.geolocation.getCurrentPosition(data => {\n        let url = \"http://api.weatherstack.com/current?access_key=3ff6d77fb5981d97702375812e7ab5b9&query=\" + data.coords.latitude + \",\" + data.coords.longitude;\n        this.httpClient.get(url).subscribe(resa => {\n          console.log(resa);\n          this.temperatureOutside = resa[\"current\"].temperature;\n          this.humidityOutside = resa[\"current\"].humidity;\n          this.descriptions = resa[\"current\"].weather_descriptions[0];\n          let iconClass;\n          switch (this.descriptions) {\n            case 'Partly Cloudy':\n              iconClass = 'partly_cloudy';\n              break;\n            case 'Haze':\n            case 'Overcast':\n              iconClass = 'full_clouds';\n              break;\n            case 'Clear':\n              iconClass = 'night';\n              break;\n            case 'Patchy Light Drizzle':\n              iconClass = 'sun_rain_clouds';\n              break;\n            case 'Sunny':\n              iconClass = 'full_sun';\n              break;\n            case 'Patchy Rain Possible':\n              iconClass = 'cloud_slight_rain';\n              break;\n            case 'Light Rain':\n            case 'Light Rain, Mist':\n              iconClass = 'cloud_slight_rain';\n              break;\n            case 'Moderate Or Heavy Rain Shower':\n              iconClass = 'rainy';\n              break;\n            case 'Thunder':\n              iconClass = 'thunder';\n              break;\n            default:\n              iconClass = 'full_clouds';\n              break;\n            // some may be missing \n          }\n\n          ;\n          this.weatherImg = \"https://weatherstack.com/site_images/weather_icon_\" + iconClass + \".svg\";\n        });\n      });\n    }\n    getDevices() {\n      this.storage.get(\"rooms\").then(val => {\n        this.room = val.find(element => element.id === this.room.id);\n        this.devices = this.room.devices;\n        this.devices.forEach(element => {\n          switch (element.deviceType) {\n            case \"text\":\n              this.controller.client.subscribe(element.deviceTopic, 1);\n              this.controller.client.onMessageArrived = this.textMessageArrived.bind(this);\n              break;\n            case \"switch\":\n              this.controller.client.subscribe(element.deviceTopic, 1);\n              break;\n            case \"sensor\":\n              this.controller.client.subscribe(element.deviceTopic, 1);\n              this.controller.client.onMessageArrived = this.textMessageArrived.bind(this);\n              this.text = element.precision;\n              break;\n            default:\n              break;\n          }\n        });\n        if (this.devices.length == 0) {\n          this.isDevicesEmpty = false;\n        } else {\n          this.isDevicesEmpty = true;\n        }\n      });\n    }\n    textMessageArrived(message) {\n      if (document.getElementById(message.destinationName + \"0\")) {\n        document.getElementById(message.destinationName + \"0\").innerHTML = message.payloadString;\n      }\n      if (document.getElementById(message.destinationName + \"1\")) {\n        let element = this.devices.find(element => element.deviceTopic === message.destinationName && element.deviceType == \"sensor\");\n        let prefix = '';\n        let postfix = '';\n        let precision = 2;\n        if (element.prefix) prefix = element.prefix;\n        if (element.postfix) postfix = element.postfix;\n        if (element.precision) precision = element.precision;\n        document.getElementById(message.destinationName + \"1\").innerHTML = prefix + parseFloat(message.payloadString).toFixed(precision) + postfix;\n      }\n    }\n    dismiss() {\n      this.modalCtrl.dismiss({\n        'dismissed': true\n      });\n    }\n    addDevices() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const modal = yield this.modalCtrl.create({\n          component: AddDevicePage,\n          componentProps: {\n            'roomData': this.room\n          },\n          mode: \"ios\"\n        });\n        modal.onDidDismiss().then(() => {\n          this.getDevices();\n        });\n        return yield modal.present();\n      });\n    }\n    toggleChange(bool, device) {\n      switch (bool) {\n        case true:\n          this.controller.sendMessage(device.onEvent, device.deviceTopic);\n          break;\n        case false:\n          this.controller.sendMessage(device.offEvent, device.deviceTopic);\n          break;\n        default:\n          break;\n      }\n    }\n    presentAlertPrompt(device) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let inputs = [];\n        let buttons = [];\n        switch (device.deviceType) {\n          case \"text\":\n            inputs = [{\n              name: 'deviceName',\n              type: 'text',\n              value: device.deviceName,\n              placeholder: 'Insert new name'\n            }, {\n              name: 'deviceTopic',\n              type: 'text',\n              value: device.deviceTopic,\n              placeholder: 'Insert new topic'\n            }];\n            buttons = [{\n              text: 'Cancel',\n              role: 'cancel',\n              cssClass: 'secondary',\n              handler: () => {\n                console.log('Confirm Cancel');\n              }\n            }, {\n              text: 'Delete',\n              cssClass: 'danger',\n              role: \"delete\",\n              handler: () => {\n                this.room.devices.forEach((element, i) => {\n                  if (element.deviceId == device.deviceId) {\n                    this.room.devices.splice(i, 1);\n                  }\n                });\n                this.storage.get(\"rooms\").then(val => {\n                  val.forEach((element, i) => {\n                    if (element.id == this.room.id) {\n                      val[i] = this.room;\n                    }\n                  });\n                  this.storage.set(\"rooms\", val);\n                });\n              }\n            }, {\n              text: 'Ok',\n              role: \"ok\",\n              handler: data => {\n                device.deviceName = data.deviceName;\n                device.deviceTopic = data.deviceTopic;\n                this.room.devices.forEach((element, i) => {\n                  if (element.deviceId == device.deviceId) {\n                    element = device;\n                  }\n                });\n                this.storage.get(\"rooms\").then(val => {\n                  val.forEach((element, i) => {\n                    if (element.id == this.room.id) {\n                      val[i] = this.room;\n                    }\n                  });\n                  this.storage.set(\"rooms\", val);\n                });\n              }\n            }];\n            break;\n          case \"switch\":\n            inputs = [{\n              name: 'deviceName',\n              type: 'text',\n              value: device.deviceName,\n              placeholder: 'Insert new name'\n            }, {\n              name: 'deviceTopic',\n              type: 'text',\n              value: device.deviceTopic,\n              placeholder: 'Insert new topic'\n            }, {\n              name: 'onEvent',\n              type: 'text',\n              value: device.onEvent,\n              placeholder: 'Insert new on event'\n            }, {\n              name: 'offEvent',\n              type: 'text',\n              value: device.offEvent,\n              placeholder: 'Insert new off event'\n            }];\n            buttons = [{\n              text: 'Cancel',\n              role: 'cancel',\n              cssClass: 'secondary',\n              handler: () => {\n                console.log('Confirm Cancel');\n              }\n            }, {\n              text: 'Delete',\n              cssClass: 'danger',\n              role: \"delete\",\n              handler: () => {\n                this.room.devices.forEach((element, i) => {\n                  if (element.deviceId == device.deviceId) {\n                    this.room.devices.splice(i, 1);\n                  }\n                });\n                this.storage.get(\"rooms\").then(val => {\n                  val.forEach((element, i) => {\n                    if (element.id == this.room.id) {\n                      val[i] = this.room;\n                    }\n                  });\n                  this.storage.set(\"rooms\", val);\n                });\n              }\n            }, {\n              text: 'Ok',\n              role: 'ok',\n              handler: data => {\n                device.deviceName = data.deviceName;\n                device.deviceTopic = data.deviceTopic;\n                device.onEvent = data.onEvent;\n                device.offEvent = data.offEvent;\n                this.room.devices.forEach((element, i) => {\n                  if (element.deviceId == device.deviceId) {\n                    element = device;\n                  }\n                });\n                this.storage.get(\"rooms\").then(val => {\n                  val.forEach((element, i) => {\n                    if (element.id == this.room.id) {\n                      val[i] = this.room;\n                    }\n                  });\n                  this.storage.set(\"rooms\", val);\n                });\n              }\n            }];\n            break;\n          case \"sensor\":\n            inputs = [{\n              name: 'deviceName',\n              type: 'text',\n              value: device.deviceName,\n              placeholder: 'Insert new name'\n            }, {\n              name: 'deviceTopic',\n              type: 'text',\n              value: device.deviceTopic,\n              placeholder: 'Insert new topic'\n            }, {\n              name: 'prefix',\n              type: 'text',\n              value: device.prefix,\n              placeholder: 'Insert new prefix'\n            }, {\n              name: 'postfix',\n              type: 'text',\n              value: device.postfix,\n              placeholder: 'Insert new postfix'\n            }, {\n              name: 'precision',\n              type: 'text',\n              value: device.precision,\n              placeholder: 'Insert new precision'\n            }];\n            buttons = [{\n              text: 'Cancel',\n              role: 'cancel',\n              cssClass: 'secondary',\n              handler: () => {\n                console.log('Confirm Cancel');\n              }\n            }, {\n              text: 'Delete',\n              cssClass: 'danger',\n              role: \"delete\",\n              handler: () => {\n                this.room.devices.forEach((element, i) => {\n                  if (element.deviceId == device.deviceId) {\n                    this.room.devices.splice(i, 1);\n                  }\n                });\n                this.storage.get(\"rooms\").then(val => {\n                  val.forEach((element, i) => {\n                    if (element.id == this.room.id) {\n                      val[i] = this.room;\n                    }\n                  });\n                  this.storage.set(\"rooms\", val);\n                });\n              }\n            }, {\n              text: 'Ok',\n              role: \"ok\",\n              handler: data => {\n                device.deviceName = data.deviceName;\n                device.deviceTopic = data.deviceTopic;\n                device.prefix = data.prefix;\n                device.postfix = data.postfix;\n                device.precision = data.precision;\n                this.room.devices.forEach((element, i) => {\n                  if (element.deviceId == device.deviceId) {\n                    element = device;\n                  }\n                });\n                this.storage.get(\"rooms\").then(val => {\n                  val.forEach((element, i) => {\n                    if (element.id == this.room.id) {\n                      val[i] = this.room;\n                    }\n                  });\n                  this.storage.set(\"rooms\", val);\n                });\n                this.storage.get(\"widgets\").then(val => {\n                  val.forEach((element, i) => {\n                    if (element.value == device.deviceTopic) {\n                      element.name = data.deviceName;\n                      element.value = data.deviceTopic;\n                      element.prefix = data.prefix;\n                      element.postfix = data.postfix;\n                      element.precision = data.precision;\n                      val[i] = element;\n                    }\n                  });\n                  this.storage.set(\"widgets\", val);\n                });\n              }\n            }];\n            break;\n          default:\n            break;\n        }\n        const alert = yield this.alertController.create({\n          header: 'Edit Device',\n          inputs: inputs,\n          buttons: buttons,\n          mode: \"ios\"\n        });\n        alert.onDidDismiss().then(e => {\n          if (e.role == \"ok\" || e.role == \"delete\") {\n            this.getDevices();\n          }\n        });\n        yield alert.present();\n      });\n    }\n    delete() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          header: 'Confirm!',\n          message: 'Are you sure you want to delete the room ?',\n          mode: \"ios\",\n          buttons: [{\n            text: 'Cancel',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: blah => {\n              console.log('Confirm Cancel: blah');\n            }\n          }, {\n            text: 'Okay',\n            handler: () => {\n              this.storage.get(\"rooms\").then(val => {\n                val.forEach((element, i) => {\n                  if (element.id == this.room.id) {\n                    val.splice(i, 1);\n                  }\n                });\n                this.storage.set(\"rooms\", val);\n              });\n              this.dismiss();\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    }\n  }\n  RoomPage.ɵfac = function RoomPage_Factory(t) {\n    return new (t || RoomPage)(i0.ɵɵdirectiveInject(Geolocation), i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.NavParams), i0.ɵɵdirectiveInject(i3.Storage), i0.ɵɵdirectiveInject(i2.ModalController), i0.ɵɵdirectiveInject(i4.ControllerService), i0.ɵɵdirectiveInject(i2.AlertController));\n  };\n  RoomPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RoomPage,\n    selectors: [[\"app-room\"]],\n    decls: 43,\n    vars: 7,\n    consts: [[\"color\", \"primary\", \"mode\", \"ios\", 1, \"first-toolbar\"], [\"slot\", \"start\"], [3, \"click\"], [\"slot\", \"icon-only\", \"name\", \"trash\"], [\"slot\", \"primary\"], [\"slot\", \"icon-only\", \"name\", \"close\"], [\"color\", \"primary\", \"mode\", \"ios\", 1, \"second-toolbar\"], [1, \"ion-align-items-center\", \"negative-margin\"], [\"col-4\", \"\", 1, \"ion-text-center\"], [\"alt\", \"\", 3, \"src\"], [\"text-medium\", \"\", 1, \"ion-no-margin\"], [1, \"negative-margin\"], [\"text-small\", \"\", 1, \"ion-no-margin\"], [\"color\", \"light\"], [1, \"grid-content\", \"ion-no-padding\"], [1, \"ion-no-padding\"], [\"color\", \"tint\", \"mode\", \"ios\", 1, \"homeCard\", \"ion-no-margin\"], [1, \"devicesHeader\", \"ion-margin\"], [\"mode\", \"md\"], [1, \"ion-activatable\"], [\"name\", \"add\", 1, \"plus\", 3, \"click\"], [\"class\", \"ion-align-items-stretch\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"ion-align-items-stretch\"], [\"size\", \"6\", \"size-sm\", \"\", \"size-md\", \"\", \"size-lg\", \"\", \"size-xl\", \"\", 4, \"ngFor\", \"ngForOf\"], [\"size\", \"6\", \"size-sm\", \"\", \"size-md\", \"\", \"size-lg\", \"\", \"size-xl\", \"\"], [\"mode\", \"ios\", 1, \"deviceCard\", \"ion-no-margin\"], [3, \"name\"], [\"name\", \"more\", 1, \"more\", 3, \"click\"], [3, \"checked\", \"ionChange\", 4, \"ngIf\"], [3, \"id\", 4, \"ngIf\"], [3, \"checked\", \"ionChange\"], [3, \"id\"], [1, \"noDevices\"]],\n    template: function RoomPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-buttons\", 1)(3, \"ion-button\", 2);\n        i0.ɵɵlistener(\"click\", function RoomPage_Template_ion_button_click_3_listener() {\n          return ctx.delete();\n        });\n        i0.ɵɵelement(4, \"ion-icon\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"ion-title\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ion-buttons\", 4)(8, \"ion-button\", 2);\n        i0.ɵɵlistener(\"click\", function RoomPage_Template_ion_button_click_8_listener() {\n          return ctx.dismiss();\n        });\n        i0.ɵɵelement(9, \"ion-icon\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"ion-toolbar\", 6)(11, \"ion-grid\")(12, \"ion-row\", 7)(13, \"ion-col\", 8);\n        i0.ɵɵelement(14, \"img\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"ion-col\", 8)(16, \"p\", 10);\n        i0.ɵɵtext(17);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"ion-col\", 8)(19, \"p\", 10);\n        i0.ɵɵtext(20);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(21, \"ion-row\", 11)(22, \"ion-col\", 8)(23, \"p\", 12);\n        i0.ɵɵtext(24);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"ion-col\", 8)(26, \"p\", 12);\n        i0.ɵɵtext(27, \"Temp Outside\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"ion-col\", 8)(29, \"p\", 12);\n        i0.ɵɵtext(30, \"Humidity Outside\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(31, \"ion-content\", 13)(32, \"ion-list\", 14)(33, \"ion-grid\", 15)(34, \"ion-card\", 16)(35, \"ion-card-header\", 17)(36, \"ion-card-title\", 18);\n        i0.ɵɵtext(37, \"Devices \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"div\", 19)(39, \"ion-icon\", 20);\n        i0.ɵɵlistener(\"click\", function RoomPage_Template_ion_icon_click_39_listener() {\n          return ctx.addDevices();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(40, \"ion-ripple-effect\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(41, RoomPage_ion_row_41_Template, 2, 1, \"ion-row\", 21);\n        i0.ɵɵtemplate(42, RoomPage_ion_card_content_42_Template, 3, 0, \"ion-card-content\", 22);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.room.name);\n        i0.ɵɵadvance(8);\n        i0.ɵɵpropertyInterpolate(\"src\", ctx.weatherImg, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.temperatureOutside, \"\\u00B0\\u1D9C\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.humidityOutside, \"%\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.descriptions);\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngIf\", ctx.isDevicesEmpty);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isDevicesEmpty);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i2.IonButton, i2.IonButtons, i2.IonCard, i2.IonCardContent, i2.IonCardHeader, i2.IonCardSubtitle, i2.IonCardTitle, i2.IonCol, i2.IonContent, i2.IonGrid, i2.IonHeader, i2.IonIcon, i2.IonList, i2.IonRippleEffect, i2.IonRow, i2.IonTitle, i2.IonToggle, i2.IonToolbar, i2.BooleanValueAccessor],\n    styles: [\".header-md[_ngcontent-%COMP%]:after{background-image:none!important}ion-header[_ngcontent-%COMP%]   .first-toolbar[_ngcontent-%COMP%]{padding-top:36px}ion-header[_ngcontent-%COMP%]   .second-toolbar[_ngcontent-%COMP%]{padding-bottom:70px}.negative-margin[_ngcontent-%COMP%]{margin-top:-20px}[text-medium][_ngcontent-%COMP%]{font-size:1.6rem}[text-small][_ngcontent-%COMP%]{font-size:.8rem}.plus[_ngcontent-%COMP%]{position:absolute;right:0;top:1rem;font-size:20px}.more[_ngcontent-%COMP%]{position:absolute;right:0;top:1rem;font-size:20px!important}ion-header[_ngcontent-%COMP%]{position:absolute;z-index:1}.grid-content[_ngcontent-%COMP%]{z-index:999;display:block;position:relative;transform:translateY(190px);background:#fff;border-top-left-radius:50px;border-top-right-radius:50px}.noDevices[_ngcontent-%COMP%]{height:32vh;text-align:center;margin-top:50%}.inner-scroll[_ngcontent-%COMP%]   scroll-y[_ngcontent-%COMP%]{border-top-left-radius:50px;border-top-right-radius:50px}.usageCard[_ngcontent-%COMP%]{margin-bottom:30px;box-shadow:none;border-radius:16px}.homeCard[_ngcontent-%COMP%]{box-shadow:none;border-top-left-radius:46px;border-top-right-radius:46px}.devicesHeader[_ngcontent-%COMP%]{margin-top:1rem;margin-bottom:0;margin-left:0}.deviceCard[_ngcontent-%COMP%]{height:100%;background:#fff;border-radius:20px;margin-left:.4rem;margin-right:.4rem;margin-bottom:.8rem}.deviceCard[_ngcontent-%COMP%]   ion-icon[_ngcontent-%COMP%]{font-size:2rem}.deviceCard[_ngcontent-%COMP%]   ion-toggle[_ngcontent-%COMP%]{padding-left:0}.deviceCard[_ngcontent-%COMP%]   ion-card-subtitle[_ngcontent-%COMP%]{font-size:.8rem}.swiper-slide[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:100%;height:120px}\"]\n  });\n  return RoomPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}