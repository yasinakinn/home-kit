{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Paho } from 'ng2-mqtt/mqttws31';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ng2-mqtt/mqttws31\";\nexport let ControllerService = /*#__PURE__*/(() => {\n  class ControllerService {\n    constructor(client, message) {\n      this.client = client;\n      this.message = message;\n      this.reconnectTimeout = 2000;\n      this.host = \"test.mosquitto.org\";\n      this.port = 9001;\n      this.mqttCounter = 0;\n      this.client = new Paho.MQTT.Client(this.host, this.port, \"randomName\" + Math.floor(Math.random() * 9000) + 1000);\n      this.client.onMessageArrived = this.onMessageArrived.bind(this);\n      this.client.onConnectionLost = this.onConnectionLost.bind(this);\n    }\n    onConnectionLost(responseObject) {\n      console.log(\"Connection lost, trying reconnect\");\n      if (this.client.isConnected() == false) {\n        this.mqttCounter++;\n        this.client.connect({\n          onSuccess: this.onConnected.bind(this),\n          onFailure: this.onFail.bind(this)\n        });\n      }\n    }\n    onConnected() {\n      if (this.mqttCounter > 0) {\n        console.log(\"Connected after lost\");\n      } else {\n        console.log(\"Connected first time\");\n      }\n      return 0;\n    }\n    onFail() {\n      if (this.client.isConnected() == false) {\n        this.mqttCounter++;\n        this.client.connect({\n          onSuccess: this.onConnected.bind(this),\n          onFailure: this.onFail.bind(this)\n        });\n      }\n    }\n    onMessageArrived(message) {\n      return message;\n    }\n    sendMessage(msg, topic) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var message = new Paho.MQTT.Message(msg);\n        message.destinationName = topic;\n        this.client.send(message);\n      });\n    }\n  }\n  ControllerService.ɵfac = function ControllerService_Factory(t) {\n    return new (t || ControllerService)(i0.ɵɵinject(i1.Paho.MQTT.Client), i0.ɵɵinject(i1.Paho.MQTT.Message));\n  };\n  ControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ControllerService,\n    factory: ControllerService.ɵfac\n  });\n  return ControllerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}